{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# importing 4 CSV files containing information about user history on an application named \"Yammer\"\n",
    "# First we examine and clean the data\n",
    "# Then recreate the user engagement analysis\n",
    "# Lastly conduct some additional analyses to narrow down the cause"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import scipy.stats\n",
    "import pandas as pd\n",
    "import pandas_bokeh\n",
    "pandas_bokeh.output_notebook()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from IPython import display\n",
    "from ipywidgets import interact, widgets"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#import the 4 files containing user and engagementment data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "users = pd.read_csv(\"users.csv\")\n",
    "rollup = pd.read_csv(\"rollup.csv\")\n",
    "emails = pd.read_csv(\"emails.csv\")\n",
    "events = pd.read_csv(\"events.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# take a quick look at the columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print(users.head(3))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print(rollup.head(3))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print(emails.head(3))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print(events.head(3))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Double check the user_id is unique in users table"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print(len(users['user_id']), users.user_id.nunique())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# merge 3 of the files on the user_id"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "info3 = pd.merge(users, emails, on = 'user_id')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "info3 = pd.merge(info3, events, on = 'user_id')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# take a look at the combined table"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print(info3.head())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "# change the column names to keep track of which time is related to event or action"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "info3 = info3.rename(columns = {\"user_id\" : \"user\", \"created_at\" : \"userCreated\", \"language\" : \"lang\", \"activated_at\" : \"userActivation\", \"state\" : \"state\", \"occurred_at_x\" : \"actionTime\", \"action\" : \"action\", \"user_type_x\" : \"actionUserType\", \"occurred_at_y\" : \"eventTime\", \"event_type\" : \"eventType\", \"event_name\" : \"eventName\", \"location\" : \"loc\", \"device\" : \"device\", \"user_type_y\" : \"userTypeEvent\" })\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "# look at the index & info for a clean merge and get an idea of the size"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Int64Index([      0,       1,       2,       3,       4,       5,       6,\n",
       "                  7,       8,       9,\n",
       "            ...\n",
       "            6270657, 6270658, 6270659, 6270660, 6270661, 6270662, 6270663,\n",
       "            6270664, 6270665, 6270666],\n",
       "           dtype='int64', length=6270667)"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "info3.index"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 6270667 entries, 0 to 6270666\n",
      "Data columns (total 15 columns):\n",
      "user              float64\n",
      "userCreated       object\n",
      "company_id        float64\n",
      "lang              object\n",
      "userActivation    object\n",
      "state             object\n",
      "actionTime        object\n",
      "action            object\n",
      "actionUserType    float64\n",
      "eventTime         object\n",
      "eventType         object\n",
      "eventName         object\n",
      "loc               object\n",
      "device            object\n",
      "userTypeEvent     float64\n",
      "dtypes: float64(4), object(11)\n",
      "memory usage: 765.5+ MB\n"
     ]
    }
   ],
   "source": [
    "info3.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "# using this new merged file to recreate the loss in user enagement to start\n",
    "# this graph is the one that brought attention to management and what is being researched"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'info3' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-1-711e3300c201>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0minfo3\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0minfo3\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minfo3\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'eventType'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstr\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmatch\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'engagement'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m&\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0minfo3\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'eventName'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstr\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmatch\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'login'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0minfo3\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"eventTime\"\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mto_datetime\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minfo3\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"eventTime\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mweek\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;31m#group by date and count unique id's\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mdf2\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0minfo3\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgroupby\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'eventTime'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'user'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnunique\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mNameError\u001b[0m: name 'info3' is not defined"
     ]
    }
   ],
   "source": [
    "info3 = info3[(info3['eventType'].str.match('engagement')) & (info3['eventName'].str.match('login'))]\n",
    "info3[\"eventTime\"] = pd.to_datetime(info3[\"eventTime\"]).dt.week\n",
    "\n",
    "#group by date and count unique id's\n",
    "df2 = info3.groupby(['eventTime'])['user'].nunique()\n",
    "\n",
    "#flatten the file\n",
    "df2 = df2.reset_index()\n",
    "\n",
    "#sort by date\n",
    "df3 = df2.sort_values(by=['eventTime'], ascending=False)\n",
    "\n",
    "\n",
    "#display\n",
    "#fig = px.line(df3, x='eventTime', y='user', labels={'y':'#users'})\n",
    "#fig.show()\n",
    "\n",
    "df3.plot_bokeh.line(\n",
    "    figsize=(800,450),\n",
    "    y=\"company_id\",\n",
    "    title=\"Company use over time\",\n",
    "    xlabel=\"week\",\n",
    "    ylabel=\"No. Users Logged\",\n",
    "    yticks=[0,500,1000,1500,2000],\n",
    "    ylim=(0,2000),\n",
    "    toolbar_locations=None,\n",
    "    colormap=[\"red\",\"green\",\"blue\"],\n",
    "    )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   user          userCreated  company_id    lang       userActivation   state  \\\n",
      "0   4.0  2013-01-01 14:37:51      5110.0  indian  2013-01-01 14:39:05  active   \n",
      "\n",
      "            actionTime              action  actionUserType  eventTime  \\\n",
      "0  2014-05-06 09:30:00  sent_weekly_digest             3.0         20   \n",
      "\n",
      "    eventType eventName    loc           device  userTypeEvent  \n",
      "0  engagement     login  India  lenovo thinkpad            3.0  \n"
     ]
    }
   ],
   "source": [
    "print(info3.head(1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import plotly.express as px\n",
    "info3 = info3[(info3['eventType'].str.match('engagement')) & (info3['eventName'].str.match('login'))]\n",
    "info3[\"eventTime\"] = pd.to_datetime(info3[\"eventTime\"]).dt.week\n",
    "\n",
    "\n",
    "#count unique user id's for each company every week\n",
    "df2 = info3.groupby(['eventTime', 'company_id'])['user'].nunique()\n",
    "\n",
    "#flatten the file\n",
    "df2 = df2.reset_index()\n",
    "\n",
    "#sort by date\n",
    "df = df2.sort_values(by=['eventTime'], ascending=False)\n",
    "\n",
    "#display\n",
    "fig = px.line(df, x='eventTime', y='user', color = 'company_id',labels={'y':'#users'})\n",
    "fig.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
